with "target_options.gpr";

project Runtime_Build is

   type RTS_Kind is ("ravenscar-sfp", "ravenscar-full");
   RTS : RTS_Kind := External ("RTS", "ravenscar-sfp");

   case RTS is
      when "ravenscar-sfp" =>
         for Languages use ("Ada", "Asm_Cpp");
      when "ravenscar-full" =>
         for Languages use ("Ada", "C", "Asm_Cpp");
   end case;

   for Library_Auto_Init use "False";
   for Library_Name use "gnat";
   for Library_Kind use "static";

   for Target use "arm-eabi";

   case RTS is
      when "ravenscar-sfp"  =>
         for Library_Dir use "sfp/adalib";
         for Object_Dir use "sfp/obj";

         for Source_Dirs use ("../bsps/stm32f429disco/bsp",
                              "../base_runtimes/ravenscar-sfp/arch",
                              "../base_runtimes/ravenscar-sfp/common");
         for Runtime ("Ada") use Project'Project_Dir & "sfp";
      when "ravenscar-full" =>
         for Library_Dir use "full/adalib";
         for Object_Dir use "full/obj";

         for Source_Dirs use ("../bsps/stm32f429disco/bsp",
                              "../base_runtimes/ravenscar-full/arch",
                              "../base_runtimes/ravenscar-full/common",
                              "../base_runtimes/ravenscar-full/math");
         for Runtime ("Ada") use Project'Project_Dir & "full";
  end case;

  type Build_Type is ("Production", "Debug", "Gnatcov");

  Build : Build_Type := external ("BUILD_RTS", "Production");

  package Compiler is
     --  COMFLAGS here is common flags (used for C and Ada).
     COMFLAGS := Target_Options.CFLAGS & ("-fcallgraph-info=su,da",
        "-ffunction-sections",
        "-fdata-sections");

     --  Per language flags (COMFLAGS will be added later)
     ADAFLAGS := ("-gnatg", "-nostdinc");
     ASMFLAGS := ("");
     CFLAGS := ("-DIN_RTS",
        "-Dinhibit_libc");
     case Build is
        when "Production" =>
	   --  Optimize
           COMFLAGS := COMFLAGS & ("-O2");
           ADAFLAGS := ADAFLAGS & ("-gnatp", "-gnatn2");
        when "Debug" =>
	   --  Disable optimization and add debug symbols
           COMFLAGS := COMFLAGS & ("-O0", "-g");
           ASMFLAGS := ASMFLAGS & ("-g");
	   --  Possibly enable assertions. This might use too much memory on
	   --  some systems or could be too slow.
	   --  ADAFLAGS := ADAFLAGS & ("-gnata");
        when "Gnatcov" =>
	   --  For coverage
           COMFLAGS := COMFLAGS & ("-O0", "-g", "-fdump-scos",
                               "-fpreserve-control-flow");
     end case;

     --  Concatenate with common flags
     ALL_ADAFLAGS := ADAFLAGS & COMFLAGS;
     ALL_CFLAGS := CFLAGS & COMFLAGS;

     for Switches ("C") use ALL_CFLAGS;
     for Switches ("Ada") use ALL_ADAFLAGS;
     for Switches ("Asm_Cpp") use ASMFLAGS;

     --  Some runtime files need to be compiled with debug info, so that gdb
     --  is not blind.
     for Switches ("s-traceb.adb") use ALL_ADAFLAGS & ("-g")
       & ("-fno-optimize-sibling-calls", "-fno-inline-functions-called-once");
     for Switches ("s-tasdeb.adb") use ALL_ADAFLAGS & ("-g", "-O0");
     for Switches ("a-except.adb") use ALL_ADAFLAGS
       & ("-g", "-O1", "-fno-inline", "-fno-toplevel-reorder");
     for Switches ("s-excdeb.adb") use ALL_ADAFLAGS & ("-g", "-O0");
     for Switches ("s-assert.adb") use ALL_ADAFLAGS & ("-g");
     for Switches ("a-tags.adb") use ALL_ADAFLAGS & ("-g");
     for Switches ("raise-gcc.c") use ALL_CFLAGS & ("-fexceptions");
  end Compiler;
end Runtime_Build;
